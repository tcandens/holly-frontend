/* Project list grid variables */
// $list-width: 1000px;
// $columns: 3; // The number of list items in the first row
// $pseudo-columns: $columns * 2 - 1; // The number of items the are needed to make two rows. First Row = 3; Second Row = 2; 3 + 3-1 = 3*2 -1
// $margin: 50px; // margin-right value for all list items
// $margin-total: ($columns - 1) * $margin; // Total of margins within the list viewport
// $item-diameter: ( $list-width - $margin-total ) / $columns; // Size of list items as calculated with widths of list margin and number of columns
// $container-width: $item-diameter * $pseudo-columns + ( $margin * $pseudo-columns ); // The width of overflow container within list viewport

@function calc-pseudo-columns($columns) {
  @return $columns * 2 - 1;
}

@function calc-container-width($diameter, $pseudo-columns, $margin) {
  @return $diameter * $pseudo-columns + ( $margin * $pseudo-columns );
}

@function calc-margin-total($columns, $margin) {
  @return ($columns - 1) * $margin;
}

@function calc-item-diameter($width, $columns, $margin) {
  @return ( $width - calc-margin-total($columns, $margin) ) / $columns;
}

@mixin project-list-layout($width, $columns, $margin) {
  $item-diameter: calc-item-diameter($width, $columns, $margin);
  $pseudo-columns: calc-pseudo-columns($columns);

  .project-list {
    margin-bottom: -$item-diameter + 100px;
    max-width: $width;
  }
  .project-list_container {
    width: calc-container-width($item-diameter, $pseudo-columns, $margin);;
  }
  .project-list_item {
    float: left;
    margin-right: $margin;
    margin-bottom: $item-diameter * 1;
    width: $item-diameter;
    height: $item-diameter;

    @if ( $columns == 3 ) {

      $nth: '#{$pseudo-columns}n+#{$pseudo-columns}';
      $pseudo-columns-penult: $pseudo-columns - 1;
      $nth-penult: '#{$pseudo-columns}n+#{$pseudo-columns-penult}';
      &:nth-child(#{$nth-penult}), &:nth-child(#{$nth}) {
        $shift-x: -($columns * $margin) - ( ( $columns - 1) * $item-diameter) - ( $item-diameter / 2 ) + ( $margin / 2);
        $shift-y: $item-diameter * 1;
        @include transform(translate3d($shift-x, $shift-y, 0 ));
      }

    } @elseif ( $columns == 2 ) {

      $nth: '#{$pseudo-columns}n+#{$pseudo-columns}';
      &:nth-child(#{$nth}) {
        $shift-x: -($columns * $margin) - ( ( $columns - 1) * $item-diameter) - ( $item-diameter / 2 ) + ( $margin / 2);
        $shift-y: $item-diameter * 1;
        @include transform(translate3d($shift-x, $shift-y, 0 ));
      }

    } @else {
      content: 'hmmm';
    }

  }

  .project-list_thumbnail-hover img {
    width: $item-diameter;
    height: $item-diameter;
  }
}

@include bp(tablet) {

  @include project-list-layout(700px, 2, 30px);

}

@include bp(phablet) {

  @include project-list-layout(500px, 2, 30px);

}

@include bp(desktop) {

  @include project-list-layout(1000px, 3, 40px);

}
